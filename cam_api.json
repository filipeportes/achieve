{
  "openapi": "3.0.0",
  "info": {
    "title": "Customer Account Management API",
    "version": "0.0.1",
    "description": "The Raisin Customer Account Management API (CAM) allows authorized internal services to retrieve Customer data. Create, update and delete requests will not be exposed via REST APIs.",
    "contact": {
      "name": "Customer Account Management API Support",
      "url": "https://raisin-jira.atlassian.net/jira/people/team/5c0eafe1-7571-4332-add8-b76dac46c9a8"
    }
  },
  "tags": [
    {
      "name": "Customer",
      "description": "Operations related to Customer object."
    },
    {
      "name": "Person",
      "description": "Operations related to Person object."
    },
    {
      "name": "Company",
      "description": "Operations related to Company object for Business Customers."
    },
    {
      "name": "Documents",
      "description": "Operations related to Documets."
    }
  ],
  "servers": [
    {
      "url": "http://{camHost}/v1",
      "variables": {
        "camHost": {
          "default": "raisin.cam",
          "description": "Service host for exposing Customer Account Management to internal services"
        }
      }
    },
    {
      "url": "https://{camHost}/v1",
      "variables": {
        "camHost": {
          "default": "raisin.cam",
          "description": "Service host for exposing Customer Account Management to external services"
        }
      }
    }
  ],
  "paths": {
    "/customers": {
      "summary": "Customer accounts",
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Search Customer accounts",
        "description": "Returns the list of Customers matching the request. Unless explicitely requested the returned Customers will contain:\n- only Persons with primary roles (eg. Account Holder)\n- no information associated with Company object (applicable only in the case of Business Customers) ",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Customer Filter",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "type eq BUSINESS"
          },
          {
            "name": "embed",
            "in": "query",
            "description": "Additional subresources to be embeded",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "all-persons",
                  "company"
                ]
              }
            },
            "example": [
              "all-persons",
              "company"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Customer"
                      },
                      {
                        "$ref": "#/components/schemas/CustomerExtended"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}": {
      "summary": "Single Customer account",
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get Customer data",
        "description": "Returns information on the specified Customer. Unless explicitely requested the returned Customers will contain:\n- only Persons with primary roles (eg. Account Holder)\n- no information associated with Company object (applicable only in the case of Business Customers) ",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerId"
          },
          {
            "name": "embed",
            "in": "query",
            "description": "Additional subresources to be embeded",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "all-persons",
                  "company"
                ]
              }
            },
            "example": [
              "all-persons",
              "company"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Customer"
                    },
                    {
                      "$ref": "#/components/schemas/CustomerExtended"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Customer not found",
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/customers/{customerId}/legal-statements": {
      "summary": "Legal Statements",
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get Legal Statements for Customer",
        "description": "Returns information about Legal Statements associated to the specified Customer.",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalStatementRegistered"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Customer not found",
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/customers/{customerId}/update-requests": {
      "summary": "Customer Update Requests",
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get Update Requests for Customer",
        "description": "Returns all Update Requests placed for specified Customer. ",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Customer not found",
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/customers/{customerId}/persons": {
      "summary": "Customer Persons",
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Search Customer Persons",
        "description": "Returns the list of Persons connected to the specified Customer, matching the request. Unless explicitely requested the returned Person will contain:\n- no information regarding user accounts\n- no metadata information regarding associated Documents",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerId"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Person Filter",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "role eq LEGAL_REPRESENTATIVE"
          },
          {
            "name": "embed",
            "in": "query",
            "description": "Additional subresources to be embeded",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "users",
                  "documents-metadata"
                ]
              }
            },
            "example": [
              "users",
              "documents-metadata"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Person"
                      },
                      {
                        "$ref": "#/components/schemas/PersonExtended"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Customer ID supplied",
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Customer not found",
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/customers/{customerId}/persons/{personId}": {
      "summary": "Single Customer Person",
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Get Person data",
        "description": "Returns information on the specified Person. Unless explicitely requested the returned Person will contain:\n- no information regarding user accounts\n- no metadata information regarding associated Documents",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerId"
          },
          {
            "$ref": "#/components/parameters/PersonId"
          },
          {
            "name": "embed",
            "in": "query",
            "description": "Additional subresources to be embeded",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "users",
                  "documents-metadata"
                ]
              }
            },
            "example": [
              "users",
              "documents-metadata"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Person"
                    },
                    {
                      "$ref": "#/components/schemas/PersonExtended"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid Customer ID supplied",
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Customer not found",
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/customers/{customerId}/persons/{personId}/update-requests": {
      "summary": "Person Update Requests",
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Get Update Requests for Person",
        "description": "Returns all Update Requests placed for specified Person. ",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerId"
          },
          {
            "$ref": "#/components/parameters/PersonId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Customer not found",
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/customers/{customerId}/persons/{personId}/documents": {
      "summary": "Person Documents",
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Get Documents for Person",
        "description": "Returns information about Documents associated to the specified Person.",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerId"
          },
          {
            "$ref": "#/components/parameters/PersonId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentRegistered"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Customer not found",
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/customers/{customerId}/company": {
      "summary": "Company data",
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get Company data",
        "description": "Returns all Company information on the specified Business Customer.",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerId"
          },
          {
            "name": "embed",
            "in": "query",
            "description": "Additional subresources to be embeded",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "documents-metadata"
                ]
              }
            },
            "example": [
              "documents-metadata"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Company"
                    },
                    {
                      "$ref": "#/components/schemas/CompanyExtended"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Customer not found",
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/company/documents": {
      "summary": "Company Documents",
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Get Documents for Company",
        "description": "Returns information about Company Documents associated to the specified Customer.",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentRegistered"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Customer not found",
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiResponseError"
            },
            "example": [
              {
                "code": "INVALID_REQUEST_PAYLOAD",
                "message": "Data provided in the request is either incomplete or invalid."
              }
            ]
          }
        }
      },
      "NotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiResponseError"
            },
            "example": [
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The requested resource was not found."
              }
            ]
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiResponseError"
            }
          }
        }
      }
    },
    "parameters": {
      "CustomerId": {
        "in": "path",
        "name": "customerId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "id of customer on which operation is executed",
        "example": "16ff626bd74142e8"
      },
      "PersonId": {
        "in": "path",
        "name": "personId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "id of person on which operation is executed",
        "example": "23sd626ac77002e8"
      }
    },
    "schemas": {
      "ApiResponseError": {
        "title": "Standard error response",
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "string"
          }
        }
      },
      "CustomerFilter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Max Mustermann Maxima Mustemann"
          },
          "type": {
            "type": "string",
            "description": "Customer Account Type",
            "enum": [
              "JOINT",
              "PERSONAL",
              "BUSINESS"
            ]
          },
          "registrationDate": {
            "type": "string",
            "format": "date",
            "example": "1983-07-21"
          },
          "accountHolder": {
            "description": "Person or Company owning the Customer Account",
            "type": "string",
            "example": "Maxima Mustemann"
          },
          "legacyId": {
            "description": "Customer Identifiers in current OBS",
            "$ref": "#/components/schemas/LegacyId"
          },
          "distributorId": {
            "type": "string",
            "example": "23bn123bd7334fe8"
          }
        }
      },
      "Customer": {
        "type": "object",
        "required": [
          "id",
          "legacyId",
          "status",
          "type",
          "distributorId",
          "registrationDate",
          "persons",
          "referenceAccounts"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id of the customer in the Customer Account Management service",
            "example": "16ff626bd74142e8"
          },
          "legacyId": {
            "$ref": "#/components/schemas/LegacyId"
          },
          "status": {
            "$ref": "#/components/schemas/CustomerAccountStatus"
          },
          "type": {
            "type": "string",
            "description": "Customer Account Type",
            "enum": [
              "JOINT",
              "PERSONAL",
              "BUSINESS"
            ]
          },
          "distributorId": {
            "type": "string",
            "example": "23bn123bd7334fe8"
          },
          "registrationDate": {
            "type": "string",
            "format": "date",
            "example": "2020-07-21"
          },
          "persons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "referenceAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceAccountRegistered"
            }
          }
        }
      },
      "CustomerExtended": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Customer"
          }
        ],
        "required": [
          "id",
          "legacyId",
          "status",
          "type",
          "distributorId",
          "registrationDate",
          "persons",
          "referenceAccounts",
          "_embeded"
        ],
        "properties": {
          "_embeded": {
            "$ref": "#/components/schemas/CustomerExtension"
          }
        }
      },
      "CustomerExtension": {
        "type": "object",
        "properties": {
          "persons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          }
        }
      },
      "Person": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Person"
          }
        ],
        "required": [
          "personId",
          "personalDetails",
          "roles"
        ],
        "properties": {
          "personId": {
            "type": "string",
            "example": "23sd626ac77002e8"
          },
          "personalDetails": {
            "$ref": "#/components/schemas/PersonalDetails"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "contactDetails": {
            "$ref": "#/components/schemas/ContactDetails"
          },
          "taxDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxDetails"
            }
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonRole"
            }
          }
        }
      },
      "PersonExtended": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Person"
          }
        ],
        "required": [
          "personId",
          "personalDetails",
          "roles",
          "_embeded"
        ],
        "properties": {
          "_embeded": {
            "$ref": "#/components/schemas/PersonExtension"
          }
        }
      },
      "PersonExtension": {
        "type": "object",
        "properties": {
          "userId": {
            "$ref": "#/components/schemas/UserInfo"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          }
        }
      },
      "UpdateRequestCustomer": {
        "type": "object",
        "required": [
          "requesterId",
          "requestType"
        ],
        "properties": {
          "requesterId": {
            "type": "string",
            "example": "user_2345678"
          },
          "requestType": {
            "type": "string",
            "enum": [
              "STATUS_CHANGE",
              "PERSON_ADD",
              "REFERENCE_ACCOUNT_NEW",
              "REFERENCE_ACCOUNT_UPDATE"
            ]
          },
          "updateInfo": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomerAccountStatus"
              },
              {
                "$ref": "#/components/schemas/ReferenceAccount"
              },
              {
                "$ref": "#/components/schemas/ReferenceAccountRegistered"
              }
            ],
            "discriminator": {
              "propertyName": "requestType"
            }
          },
          "document": {
            "type": "object"
          }
        }
      },
      "UpdateRequestPerson": {
        "type": "object",
        "required": [
          "requesterId",
          "requestType"
        ],
        "properties": {
          "requesterId": {
            "type": "string",
            "example": "user_2345678"
          },
          "requestType": {
            "type": "string",
            "enum": [
              "ROLE",
              "ADDRESS",
              "PERSONAL_DETAIL",
              "CONTACT_DETAIL",
              "USER_CREATION",
              "PASSWORD_RESET"
            ]
          },
          "updateInfo": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PersonalDetails"
              },
              {
                "$ref": "#/components/schemas/ContactDetails"
              },
              {
                "$ref": "#/components/schemas/TaxDetails"
              },
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "$ref": "#/components/schemas/PersonRole"
              }
            ],
            "discriminator": {
              "propertyName": "requestType"
            }
          },
          "document": {
            "type": "object"
          }
        }
      },
      "UpdateRequestResponse": {
        "type": "object",
        "anyOf": [
          {
            "$ref": "#/components/schemas/UpdateRequestCustomer"
          },
          {
            "$ref": "#/components/schemas/UpdateRequestPerson"
          }
        ],
        "required": [
          "requestId",
          "requesterId",
          "requestType",
          "status"
        ],
        "properties": {
          "requestId": {
            "type": "string",
            "example": "REQ_2345678"
          },
          "status": {
            "type": "string",
            "enum": [
              "REQUESTED",
              "PENDING_DOCUMENT",
              "ACCEPTED",
              "REJECTED"
            ]
          },
          "outstandingAction": {
            "description": "Next step to be completed in the lifecycle of the current Update Request",
            "type": "string",
            "example": "Please upload ID Document!"
          }
        }
      },
      "Company": {
        "type": "object",
        "required": [
          "id",
          "name",
          "legalForm",
          "registrationNumber",
          "industry",
          "commercialCourt",
          "taxDetails",
          "address"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": 587654356789
          },
          "name": {
            "type": "string",
            "example": "Muster Gruppe"
          },
          "legalForm": {
            "type": "string",
            "example": "UG"
          },
          "registrationNumber": {
            "type": "string",
            "example": "HRB 123456"
          },
          "industry": {
            "type": "string",
            "example": "BANKING"
          },
          "commercialCourt": {
            "type": "string",
            "example": "Musterstadt Amtsgericht"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/TaxDetails"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "CompanyExtended": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Company"
          }
        ],
        "required": [
          "id",
          "name",
          "legalForm",
          "registrationNumber",
          "industry",
          "commercialCourt",
          "taxDetails",
          "address",
          "_embeded"
        ],
        "properties": {
          "_embeded": {
            "$ref": "#/components/schemas/CompanyExtension"
          }
        }
      },
      "CompanyExtension": {
        "type": "object",
        "properties": {
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "example": "Musterstrasse"
          },
          "streetNumber": {
            "type": "string",
            "example": "20"
          },
          "additionalInformation": {
            "type": "string"
          },
          "city": {
            "type": "string",
            "example": "Musterstadt"
          },
          "postalCode": {
            "type": "string",
            "example": "10020"
          },
          "countryCode": {
            "type": "string",
            "example": "DEU"
          }
        }
      },
      "Document": {
        "type": "object",
        "required": [
          "id",
          "documentType",
          "metadata",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "89ut626b"
          },
          "documentType": {
            "type": "string",
            "enum": [
              "ID",
              "PASSPORT",
              "PROOF_OF_ADDRESS",
              "REGISTER_EXCERPT"
            ]
          },
          "metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DocumentIdMetaData"
              },
              {
                "$ref": "#/components/schemas/DocumentProofAddressMetaData"
              }
            ],
            "example": [
              {
                "documentId": "C5HN6LHHN",
                "fileName": "Passpport.JPG",
                "issuingAuthority": "Stadtverwaltung Berlin",
                "validFrom": "2015-12-31",
                "validUntil": "2020-12-31"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Indicating whether document has been validate and is active.",
            "enum": [
              "PENDING_APPROVAL",
              "APPROVED",
              "REJECTED",
              "INVALIDATED"
            ]
          }
        }
      },
      "DocumentIdMetaData": {
        "type": "object",
        "required": [
          "documentId",
          "fileName",
          "issuingAuthority",
          "validFrom",
          "validUntil"
        ],
        "properties": {
          "documentId": {
            "maxLength": 80,
            "minLength": 1,
            "pattern": "^([\\w-]*)$",
            "type": "string",
            "example": "C5HN6LHHN",
            "description": "Document ID, i.e. Passport number or contract identifier"
          },
          "fileName": {
            "maxLength": 150,
            "minLength": 1,
            "pattern": "^([\\w-]*)\\.(jpeg|JPEG|jpg|JPG|jfif|JFIF|gif|GIF|png|PNG|pdf|PDF)$",
            "type": "string",
            "example": "id.pdf"
          },
          "issuingAuthority": {
            "maxLength": 250,
            "minLength": 1,
            "pattern": "^([\\w-\\s]*)$",
            "type": "string",
            "example": "Stadtverwaltung Berlin"
          },
          "validFrom": {
            "pattern": "^([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))$",
            "type": "string",
            "description": "The start date of being a valid document",
            "example": "2015-12-31"
          },
          "validUntil": {
            "pattern": "^([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))$",
            "type": "string",
            "description": "The last date of being a valid document",
            "example": "2020-12-31"
          }
        }
      },
      "DocumentProofAddressMetaData": {
        "type": "object",
        "required": [
          "fileName",
          "validFrom"
        ],
        "properties": {
          "fileName": {
            "maxLength": 150,
            "minLength": 1,
            "pattern": "^([\\w-]*)\\.(jpeg|JPEG|jpg|JPG|jfif|JFIF|gif|GIF|png|PNG|pdf|PDF)$",
            "type": "string",
            "example": "Anmeldung.pdf"
          },
          "validFrom": {
            "pattern": "^([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))$",
            "type": "string",
            "description": "The start date of being a valid document",
            "example": "2020-12-31"
          }
        }
      },
      "DocumentRegistered": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Document"
          }
        ],
        "required": [
          "id",
          "documentType",
          "metadata",
          "status",
          "documentUri"
        ],
        "properties": {
          "documentUri": {
            "type": "string",
            "example": "cam/customer/1234567/document/89ut626b"
          }
        }
      },
      "LegalStatementRegistered": {
        "type": "object",
        "required": [
          "documentUri"
        ],
        "properties": {
          "documentId": {
            "type": "string",
            "example": "DOC_45678"
          },
          "revisionId": {
            "type": "string",
            "example": "12345"
          },
          "type": {
            "enum": [
              "ACCOUNT_OPENING",
              "TERMS_AND_CONDITIONS",
              "FATCA",
              "DEPOSIT_GUARANTEE_SCHEME",
              "DEPOSIT_PROTECTION_INFORMATION",
              "LEGAL_ACTIVITY_BENEFICIAL_OWNERSHIP"
            ]
          },
          "legalEntityType": {
            "enum": [
              "PERSON",
              "CUSTOMER"
            ]
          },
          "documentUri": {
            "type": "string",
            "example": "cam/customer/1234567/document/DOC_45678"
          }
        }
      },
      "ContactDetails": {
        "title": "Contact Details",
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "muster@domain.com"
          },
          "phoneNumber": {
            "type": "string",
            "example": "+491234567890"
          }
        }
      },
      "PersonalDetails": {
        "title": "Personal Details",
        "type": "object",
        "required": [
          "firstName",
          "lastName",
          "birthDate"
        ],
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Max"
          },
          "lastName": {
            "type": "string",
            "example": "Mustermann"
          },
          "birthName": {
            "type": "string",
            "example": "Muster"
          },
          "birthDate": {
            "type": "string",
            "format": "date",
            "example": "1983-07-21"
          },
          "birthPlace": {
            "type": "string",
            "example": "Musterstadt"
          },
          "nationalityPrimary": {
            "type": "string",
            "description": "Primary nationality of the Person expressed in ISO3",
            "example": "DEU"
          },
          "nationalitySecondary": {
            "type": "string",
            "description": "Secondary nationality of the Person expressed in ISO3",
            "example": "AUT"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "DIVERSE"
            ]
          },
          "maritalStatus": {
            "type": "string",
            "enum": [
              "SINGLE",
              "MARRIED",
              "WIDOWED",
              "DIVORCED",
              "SEPARATED"
            ]
          },
          "profession": {
            "type": "string",
            "example": "FREELANCER"
          },
          "industry": {
            "type": "string",
            "example": "COMMERCE"
          }
        }
      },
      "TaxDetails": {
        "title": "Tax Details",
        "type": "object",
        "required": [
          "taxIdentificationNumber",
          "countryCode"
        ],
        "properties": {
          "taxIdentificationNumber": {
            "type": "string",
            "example": "999999-9999"
          },
          "countryCode": {
            "type": "string",
            "description": "Tax residency expressed in ISO3",
            "example": "DNK"
          }
        }
      },
      "PersonRoleName": {
        "type": "string",
        "enum": [
          "Account Holder",
          "Beneficial Owner",
          "Authorized Person",
          "Legal Representative"
        ]
      },
      "PersonFilter": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PersonRoleName"
          }
        ],
        "required": [
          "name"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "WAITING_APPROVAL",
              "ACTIVE",
              "DISABLED"
            ]
          }
        }
      },
      "PersonRole": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PersonFilter"
          }
        ],
        "required": [
          "name",
          "status",
          "primary"
        ],
        "properties": {
          "primary": {
            "description": "Whether the role comes with full permissions on the account eg. Account Holder",
            "type": "boolean",
            "default": false
          }
        }
      },
      "UserInfo": {
        "type": "object",
        "required": [
          "userId",
          "status"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "example": "user_2345678"
          },
          "status": {
            "type": "string",
            "enum": [
              "BLOCKED",
              "ACTIVE",
              "DISABLED"
            ]
          }
        }
      },
      "CustomerAccountStatus": {
        "type": "string",
        "description": "Customer Account Status",
        "enum": [
          "PENDING_APPROVAL",
          "ACTIVE",
          "REJECTED",
          "DISABLED",
          "CLOSED"
        ]
      },
      "ReferenceAccount": {
        "type": "object",
        "required": [
          "accountHolder",
          "iban",
          "ccy"
        ],
        "properties": {
          "accountHolder": {
            "type": "string",
            "example": "Max Muster"
          },
          "iban": {
            "type": "string",
            "pattern": "^[A-Z]{2}[0-9]{2}[A-Z0-9]{1,30}$",
            "example": "DE65670400000351013000"
          }
        }
      },
      "ReferenceAccountRegistered": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceAccount"
          }
        ],
        "required": [
          "accountId",
          "accountHolder",
          "iban",
          "ccy"
        ],
        "properties": {
          "accountId": {
            "type": "string",
            "example": "234567"
          },
          "ccy": {
            "type": "string",
            "example": "USD"
          }
        }
      },
      "LegacyId": {
        "type": "object",
        "required": [
          "partnerNo",
          "bacNo"
        ],
        "properties": {
          "partnerNo": {
            "type": "string",
            "example": "200594"
          },
          "bacNo": {
            "type": "string",
            "example": "BAC_123_456_789_012"
          }
        }
      }
    }
  }
}